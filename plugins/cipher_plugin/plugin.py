from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model.database.Database import Database
from .lib.Cipher import Cipher
import logging
import os

import binascii
import base64
import filetype


current_path = os.path.dirname(os.path.realpath(__file__))

def onload():
    logging.debug("Cipher:loaded()")

def onunload():
    logging.debug("Cipher:unloaded()")

def parse(module, message, data):
    if(message['plugin'] == "cipher"):

        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        # Fetch application for this session ( could not use self.application
        # because the usage must be thread local )

        key_value = binascii.unhexlify(message["key"]).hex()
        iv = binascii.unhexlify(message["iv"]).hex()

        # TODO have link from base64
        kind_input = filetype.guess(binascii.unhexlify(message["arg"]))
        kind_result = filetype.guess(binascii.unhexlify(message["result"]))

        # print('File extension: %s' % kind.extension)
        # print('File MIME type: %s' % kind.mime)

        if message["opmode"] == 1:
            opmode_info = "ENCRYPT_MODE"
            try:
                input_value = binascii.unhexlify(message["arg"]).decode('utf8')
            except:
                input_value = base64.b64encode(binascii.unhexlify(message["arg"])).decode('utf8')
            output_value = binascii.unhexlify(message["result"]).hex()

        elif  message["opmode"] == 2:
            opmode_info = "DECRYPT_MODE"
            try:
                output_value = binascii.unhexlify(message["result"]).decode('utf8')
            except:
                output_value = base64.b64encode(binascii.unhexlify(message["result"])).decode('utf8')
            input_value = binascii.unhexlify(message["arg"]).hex()

        cipher = Cipher(message["algo"], key_value, iv, opmode_info, input_value, output_value, message["stack"])

        cipher.application_id = module.application.id
        logging.debug(repr(cipher))

        query = session.query(Cipher).filter(Cipher.application_id==cipher.application_id).filter(Cipher.algorithm==cipher.algorithm).filter(Cipher.key==cipher.key).filter(Cipher.iv==cipher.iv).filter(Cipher.opmode==cipher.opmode).filter(Cipher.input_value==cipher.input_value).filter(Cipher.output_value==cipher.output_value)

        resultQuery = query.all()
        
        # Prevent duplicates in DB
        if len(resultQuery) == 0:
            session.add(cipher)
            session.commit()
    

def get_frida_script():
    logging.debug("Cipher:get_frida_script()")
    with open(f"{current_path}/frida.js") as f:
        return ("Cipher", f.read())