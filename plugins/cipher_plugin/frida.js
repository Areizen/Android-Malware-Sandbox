var cipher_id;
var key_info;
var opmode_info;


function hook_cipher(){
    var cipher = Java.use("javax.crypto.Cipher");
    var threadef = Java.use('java.lang.Thread');
    var threadinstance = threadef.$new();

    cipher.init.overload('int', 'java.security.Key').implementation = function (opmode, key) {
        cipher_id = this.hashCode();
        key_info = key.getEncoded(); 
        opmode_info = opmode;
        return this.init(opmode, key);
    }

    cipher.init.overload('int', 'java.security.Key', 'java.security.spec.AlgorithmParameterSpec').implementation = function (opmode, key, params) {
        cipher_id = this.hashCode();
        key_info = key.getEncoded(); 
        opmode_info = opmode;
        return this.init(opmode, key, params);
    }

    cipher.doFinal.overload("[B").implementation = function (barr) {
        var result = this.doFinal(barr);
        if (cipher_id == this.hashCode()){
            var hexKey  = Buffer.from(new Uint8Array(key_info)).toString('hex');
            var hexIV = Buffer.from(new Uint8Array(this.getIV())).toString('hex');
            var hexArg = Buffer.from(new Uint8Array(barr)).toString('hex');
            var hexResult = Buffer.from(new Uint8Array(result)).toString('hex');

            var stack = threadinstance.currentThread().getStackTrace();
            var obj = {"plugin": "cipher", "algo" : this.getAlgorithm(), "iv" : hexIV, "opmode" : opmode_info, "key": hexKey, "arg": hexArg, "result": hexResult, 'stack': Where(stack)};
            send(JSON.stringify(obj));

            cipher_id = '';
            key_info = '';
            opmode_info = '';          
        }
        return result;
    }
}

hook_cipher()