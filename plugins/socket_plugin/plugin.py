from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model.database.Database import Database
from .lib.Socket import Socket
import logging
import os
import subprocess


current_path = os.path.dirname(os.path.realpath(__file__))
dirname = current_path + "/../../"

packet_list = []

def storepkt(pkt):
    logging.error(pkt)
    packet_list.append(pkt)

def onload():
    logging.debug("Socket:loaded()")

def onunload():
    logging.debug("Socket:unloaded()")

def parse(module, message, data):
    if(message['plugin']=="socket"):

        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        # Fetch application for this session ( could not use self.application
        # because the usage must be thread local )
    
        socket = Socket(message['method'], message['value'], message['stack'])
        socket.application_id = module.application.id
        logging.debug(repr(socket))

        query = session.query(Socket).filter(Socket.application_id==module.application.id).filter(Socket.method==socket.method).filter(Socket.value==socket.value)

        resultQuery = query.all()
        
        # Prevent duplicates in DB
        if len(resultQuery) == 0:
            session.add(socket)
            session.commit()
    

def get_frida_script():
    logging.debug("Socket:get_frida_script()")
    with open(f"{current_path}/frida.js") as f:
        return ("Socket", f.read())