function hook_socket(){

    var ServerSocket = Java.use('java.net.ServerSocket');
    var Socket = Java.use('java.net.Socket');
    var LocalServerSocket =  Java.use('android.net.LocalServerSocket');
    var DatagramSocket = Java.use('java.net.DatagramSocket');
    var threadef = Java.use('java.lang.Thread');
    var threadinstance = threadef.$new();

    ServerSocket.accept.overload().implementation = function(){
        var result = this.accept();
        var stack = threadinstance.currentThread().getStackTrace();
        var obj = {"plugin": "socket", "method" : "ServerSocket.accept()", "value": this.toString(), 'stack': Where(stack)};
        send(JSON.stringify(obj));
        return result;
    }

    Socket.$init.overload('java.lang.String', 'int').implementation = function(host, port){
        var stack = threadinstance.currentThread().getStackTrace();
        var result = this.$init(host, port);
        var msg = host + ":" + port;
        var obj = {"plugin": "socket", "method" : "Socket.$init('java.lang.String', 'int')", "value": msg, 'stack': Where(stack)};
        send(JSON.stringify(obj));
        return result;
    }

    Socket.connect.overload('java.net.SocketAddress', 'int').implementation = function(p_endpoint, p_timeout){
        var stack = threadinstance.currentThread().getStackTrace();
        var result = this.connect(p_endpoint, p_timeout);
        var msg = p_endpoint.toString() + "\n Timeout: " + p_timeout;
        var obj = {"plugin": "socket", "method" : "Socket.connect('java.net.SocketAddress', 'int')", "value": msg, 'stack': Where(stack)};
        send(JSON.stringify(obj));
        return result;
    }

    Socket.connect.overload('java.net.SocketAddress').implementation = function(p_endpoint){
        var stack = threadinstance.currentThread().getStackTrace();
        var result = this.connect(p_endpoint);
        var obj = {"plugin": "socket", "method" : "Socket.connect('java.net.SocketAddress')", "value": p_endpoint.toString(), 'stack': Where(stack)};
        send(JSON.stringify(obj));
        return result;
    }

    LocalServerSocket.accept.overload().implementation = function(){
        var stack = threadinstance.currentThread().getStackTrace();
        var result = this.accept();
        var obj = {"plugin": "socket", "method" : "LocalServerSocket.accept()", "value": this, 'stack': Where(stack)};
        send(JSON.stringify(obj));
        return result;
    }

    DatagramSocket.connect.overload('java.net.InetAddress','int').implementation = function(address, port){
        var stack = threadinstance.currentThread().getStackTrace();
        var result = this.connect(address, port);
        var msg = address + ":" + port;
        var obj = {"plugin": "socket", "method" : "DatagramSocket.connect('java.net.InetAddress','int')", "value": msg, 'stack': Where(stack)};
        send(JSON.stringify(obj));
        return result;
    }

}

hook_socket();