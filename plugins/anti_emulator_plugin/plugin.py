from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model.database.Database import Database
from .lib.AntiEmulator import AntiEmulator
import logging
import os


current_path = os.path.dirname(os.path.realpath(__file__))

def onload():
    logging.debug("antiEmulator:loaded()")

def onunload():
    logging.debug("antiEmulator:unloaded()")

def parse(module, message, data):
    if (message['plugin'] == 'bypass'):
        logging.debug("antiEmulator:parse()")

        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        antiEmulator = AntiEmulator(message['property'], message['real_value'], message['return_value'])
        antiEmulator.application_id = module.application.id
        logging.debug(repr(antiEmulator))

        query = session.query(AntiEmulator).filter(AntiEmulator.application_id==module.application.id).filter(AntiEmulator.property==antiEmulator.property).filter(AntiEmulator.real_value==antiEmulator.real_value).filter(AntiEmulator.return_value==antiEmulator.return_value)

        resultQuery = query.all()
        
        # Prevent duplicates in DB
        if len(resultQuery) == 0:
            session.add(antiEmulator)
            session.commit()
    

def get_frida_script():
    return ("antiEmulator", "")