from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model.database.Database import Database
from .lib.ProxyURL import ProxyURL
import logging
import os


current_path = os.path.dirname(os.path.realpath(__file__))

def onload():
    logging.debug("ProxyURL:loaded()")

def onunload():
    logging.debug("ProxyURL:unloaded()")

def parse(module, message, data):
    if(message['plugin'] == "proxyURL"):
        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        # Fetch application for this session ( could not use self.application
        # because the usage must be thread local )

        proxyURL = ProxyURL(message)

        proxyURL.application_id = module.application.id
        logging.debug(repr(proxyURL))

        query = session.query(ProxyURL).filter(ProxyURL.application_id==module.application.id).filter(ProxyURL.response_code==proxyURL.response_code).filter(ProxyURL.req_method==proxyURL.req_method).filter(ProxyURL.url==proxyURL.url).filter(ProxyURL.request==proxyURL.request).filter(ProxyURL.response==proxyURL.response)

        resultQuery = query.all()
        
        # Prevent duplicates in DB
        if len(resultQuery) == 0:
            session.add(proxyURL)
            session.commit()
    

def get_frida_script():
    return ("ProxyURL","")