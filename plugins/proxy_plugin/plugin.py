from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model.database.Database import Database
from .lib.Proxy import Proxy
import logging
import os


current_path = os.path.dirname(os.path.realpath(__file__))

def onload():
    logging.debug("Proxy:loaded()")

def onunload():
    logging.debug("Proxy:unloaded()")

def parse(module, message, data):
    if(message.startswith("Proxy:")):

        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        # Fetch application for this session ( could not use self.application
        # because the usage must be thread local )

        proxy = Proxy(message[len("Proxy:"):])
        proxy.application_id = module.application.id
        logging.debug(repr(proxy))

        query = session.query(Proxy).filter(Proxy.application_id==proxy.application_id).filter(Proxy.method==proxy.method)

        resultQuery = query.all()
        
        # Prevent duplicates in DB
        if len(resultQuery) == 0:
            session.add(proxy)
            session.commit()


def get_frida_script():
    return ("Proxy","")