from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model.database.Database import Database
from .lib.Log import Log
import logging
import os


current_path = os.path.dirname(os.path.realpath(__file__))

def onload():
    logging.debug("Log:loaded()")

def onunload():
    logging.debug("Log:unloaded()")

def parse(module, message, data):
    if(message.startswith("Log:")):
        logging.debug("Log !")

        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        # Fetch application for this session ( could not use self.application
        # because the usage must be thread local )
        args = message[len("Log: "):].split("|")
        log = Log(args[0], args[1])
        log.application_id = module.application.id
        logging.debug(repr(log))

        query = session.query(Log).filter(Log.application_id==log.application_id).filter(Log.tag==log.tag).filter(Log.message==log.message)

        resultQuery = query.all()

        if len(resultQuery) == 0:
            session.add(log)
            session.commit()

def get_frida_script():
    logging.debug("Log:get_frida_script()")
    with open(f"{current_path}/frida.js") as f:
        return ("Log", f.read())