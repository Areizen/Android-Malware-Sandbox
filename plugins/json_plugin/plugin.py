from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model.database.Database import Database
from .lib.Json import Json
import logging
import os


current_path = os.path.dirname(os.path.realpath(__file__))

def onload():
    logging.debug("Json:loaded()")

def onunload():
    logging.debug("Json:unloaded()")

def parse(module, message, data):
    if(message['plugin'] == "json"):
        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        # Fetch application for this session ( could not use self.application
        # because the usage must be thread local )

        json_value = Json(message['method'], message['value'])
        json_value.application_id = module.application.id
        logging.debug(repr(json_value))

        query = session.query(Json).filter(Json.application_id==module.application.id).filter(Json.value==json_value.value).filter(Json.method==json_value.method)

        resultQuery = query.all()
        
        # Prevent duplicates in DB
        if len(resultQuery) == 0:
            session.add(json_value)
            session.commit()
    

def get_frida_script():
    logging.debug("Json:get_frida_script()")
    with open(f"{current_path}/frida.js") as f:
        return ("Json", f.read())