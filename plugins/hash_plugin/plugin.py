from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model.database.Database import Database
from .lib.Hash import Hash
import logging
import os
import binascii


current_path = os.path.dirname(os.path.realpath(__file__))

def onload():
    logging.debug("Hash:loaded()")

def onunload():
    logging.debug("Hash:unloaded()")

def parse(module, message, data):
    if(message['plugin'] == "hash"):
        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        # Fetch application for this session ( could not use self.application
        # because the usage must be thread local )

        try:
            input_value = binascii.unhexlify(message['input_value']).decode('utf-8')
        except:
            input_value = binascii.unhexlify(message['input_value'])

        hash_value = Hash(message['algo'], input_value, binascii.unhexlify(message['output_value']).hex())
        hash_value.application_id = module.application.id
        logging.debug(repr(hash_value))

        query = session.query(Hash).filter(Hash.application_id==module.application.id).filter(Hash.algorithm==hash_value.algorithm).filter(Hash.input_value==hash_value.input_value).filter(Hash.output_value==hash_value.output_value)

        resultQuery = query.all()
        
        # Prevent duplicates in DB
        if len(resultQuery) == 0:
            session.add(hash_value)
            session.commit()
    

def get_frida_script():
    logging.debug("Hash:get_frida_script()")
    with open(f"{current_path}/frida.js") as f:
        return ("Hash", f.read())