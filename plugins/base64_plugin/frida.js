function base64Hook(){
    var base64 = Java.use('android.util.Base64')

    base64.decode.overload('java.lang.String', 'int').implementation = function(str, flag) {
        var result = this.decode(str, flag);
        send("base64: decode ", new Uint8Array(result))
        return result;
    }
    base64.decode.overload('[B', 'int').implementation = function(input, flag) {
        var result = this.decode(input, flag);
        send("base64: decode", new Uint8Array(result))
        return result;
    }
    base64.decode.overload('[B', 'int', 'int', 'int').implementation = function(input, offset, len, flags){
        var result = this.decode(input, offset, len, flags);
        send("base64: decode", new Uint8Array(result))
        return result;
    }
    base64.encode.overload('[B', 'int').implementation = function(input, flags) {
        var result = this.encode(input, flags);
        send("base64: encode", new Uint8Array(input))
        return result;
    }
    base64.encode.overload('[B', 'int', 'int', 'int').implementation = function(input, offset, len, flags){
        var result = this.encode(input, offset, len, flags);
        send("base64: encode", new Uint8Array(input))
        return result;
    }
    base64.encodeToString.overload('[B', 'int', 'int', 'int').implementation = function(input, offset, len, flags){
        var result = this.encodeToString(input, offset, len, flags);
        send("base64: encodeToString", new Uint8Array(input))
        return result;
    }
    base64.encodeToString.overload('[B', 'int').implementation = function(input, flags){
        var result = this.encodeToString(input, flags);
        send("base64: encodeToString", new Uint8Array(input))
        return result;
    }
}

base64Hook()