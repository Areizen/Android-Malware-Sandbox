from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model.database.Database import Database
from .lib.Base64 import Base64
import logging
import os


current_path = os.path.dirname(os.path.realpath(__file__))

def onload():
    logging.debug("Base64:loaded()")

def onunload():
    logging.debug("Base64:unloaded()")

def parse(module, message, data):
    if (message.startswith('base64:')):
        logging.debug("base64:parse()")

        method = message[len("base64: "):]

        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        try:
            data = data.decode()
        except Exception as e:
            data = data.hex()
            logging.error(f"Base64: {e}")

        base64Module = Base64(method, data)
        base64Module.application_id = module.application.id
        logging.debug(repr(base64Module))

        query = session.query(Base64).filter(Base64.application_id==module.application.id).filter(Base64.method==base64Module.method).filter(Base64.value==base64Module.value)

        resultQuery = query.all()

        # Prevent duplicates in DB
        if len(resultQuery) == 0:
            session.add(base64Module)
            session.commit()



def get_frida_script():
    logging.debug("Base64:get_frida_script()")
    with open(f"{current_path}/frida.js") as f:
        return ("Base64", f.read())