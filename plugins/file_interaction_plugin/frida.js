function fileHooks(){
    const File = Java.use("java.io.File");
    var threadef = Java.use('java.lang.Thread');
    var threadinstance = threadef.$new();

    File.$init.overload("java.lang.String").implementation = function(a0) {
        var ret = this.$init(a0);
        if (a0.length != 0){
            var stack = threadinstance.currentThread().getStackTrace();
            var obj = {"plugin": "file", "method": "File.$init('java.lang.String')", "name" : a0, 'stack': Where(stack)};
            send(JSON.stringify(obj));
        }
        return ret;
    }

    File.$init.overload("java.lang.String", "java.lang.String").implementation = function(a0, a1) {
        var ret = this.$init(a0,a1);
        var stack = threadinstance.currentThread().getStackTrace();
        var obj = {"plugin": "file", "method": "File.$init('java.lang.String','java.lang.String')", "name" : a0+ "/" + a1, 'stack': Where(stack)};
        send(JSON.stringify(obj));
        return ret;
    }

    File.isDirectory.overload().implementation = function() {
        var ret = this.isDirectory();
        if (this.toString().length != 0){
            var stack = threadinstance.currentThread().getStackTrace();
            var obj = {"plugin": "file", "method": "File.isDirectory()", "name" : this.toString(), 'stack': Where(stack)};
            send(JSON.stringify(obj));
        }
        return ret;
    }
}

fileHooks()