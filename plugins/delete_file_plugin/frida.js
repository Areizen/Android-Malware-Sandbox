function deleteFileHook(){
    var file = Java.use("java.io.File");
    var threadef = Java.use('java.lang.Thread');
    var threadinstance = threadef.$new();

    Interceptor.attach(Module.findExportByName('libc.so', 'remove'), {
        onEnter: function (args) {
            this.path = args[0].readCString();
            var stack = threadinstance.currentThread().getStackTrace();
            var obj = {"plugin": "delete_file", "method": "libc.so, remove", "name" : this.path, 'stack': Where(stack)};
            send(JSON.stringify(obj));
        },
        onLeave: function (retval) {
            //pretend file was deleted
            retval.replace(0);
        }
    });

    Interceptor.attach(Module.findExportByName('libc.so', 'unlink'), {
        onEnter: function (args) {
            this.path = args[0].readCString();
            var stack = threadinstance.currentThread().getStackTrace();
            var obj = {"plugin": "delete_file", "method": "libc.so unlink", "name" : this.path, 'stack': Where(stack)};
            send(JSON.stringify(obj));
        },
        onLeave: function (retval) {
            retval.replace(0);
        }
    });

    Interceptor.attach(Module.findExportByName('libc.so', 'rmdir'), {
        onEnter: function (args) {
            this.path = args[0].readCString();
            var stack = threadinstance.currentThread().getStackTrace();
            var obj = {"plugin": "delete_file", "method": "libc.so rmdir", "name" : this.path, 'stack': Where(stack)};
            send(JSON.stringify(obj));
        },
        onLeave: function (retval) {
            retval.replace(0);
        }
    });

    file.delete.overload().implementation = function (s) {
        s = this.getAbsolutePath()
        var stack = threadinstance.currentThread().getStackTrace();
        var obj = {"plugin": "delete_file", "method": "java.io.File delete", "name" : s, 'stack': Where(stack)};
        send(JSON.stringify(obj));
        return true; //pretend file was deleted
    }

}

deleteFileHook()