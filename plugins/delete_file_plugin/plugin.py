from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model.database.Database import Database
from .lib.DeletedFiles import DeletedFiles
import logging
import os


current_path = os.path.dirname(os.path.realpath(__file__))

def onload():
    logging.debug("deleteFile:loaded()")

def onunload():
    logging.debug("deleteFile:unloaded()")

def parse(module, message, data):
    if (message['plugin'] == 'delete_file'):
        logging.debug("deletedFile:parse()")

        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        deletedFile = DeletedFiles(message['method'], message['name'], message['stack'])
        deletedFile.application_id = module.application.id
        logging.debug(repr(deletedFile))

        query = session.query(DeletedFiles).filter(DeletedFiles.application_id==module.application.id).filter(DeletedFiles.name==deletedFile.name).filter(DeletedFiles.method==deletedFile.method)

        resultQuery = query.all()
        
        # Prevent duplicates in DB
        if len(resultQuery) == 0:
            session.add(deletedFile)
            session.commit()
    

def get_frida_script():
    logging.debug("deleteFile:get_frida_script()")
    with open(f"{current_path}/frida.js") as f:
        return ("deleteFile", f.read())