from .Device import Device

import subprocess
import logging
import time


class Emulator(Device):
    """
    Emulator controller, extends Device
    """

    def __init__(self, path_config, configuration, ):
        Device.__init__(self, path_config, configuration, 'Emulator')

    def install_certificate(self, certificate_path):
        '''
        Install the user certificate to the phone ( see scripts/install_cert.sh )
        Needed for mitmproxy to intercept SSL.
        :param certificate_path:
        :return:
        '''
        pid = subprocess.Popen(['bash', 'scripts/install_cert.sh', certificate_path, self.device_id],stdout=subprocess.DEVNULL)
        pid.wait()

        while not self.check_is_up():
            time.sleep(0.5)

    def list_avds(self):
        """
        Return the list of avds existing on the device
        :return array(str):
        """
        pid = subprocess.Popen([self.emulator_path,"-list-avds"], stdout=subprocess.PIPE, stderr = subprocess.PIPE)
        pid.wait()
        stdout, stderr = pid.communicate()
        if( stderr != b''):
            logging.error(stderr)
        return stdout.decode().strip().split()

    def start(self):
        '''
        Start the emulator according to the given configuration
        :return:
        '''
        logging.debug("Emulator:start()")

        self.kill_emulators()

        emulator_config = [self.emulator_path]

        # Setting vm_name
        vm_name = self.configuration['EMULATOR'].get('vm_name')
        emulator_config.append(f"@{vm_name}")


        # checking if the avd exists
        avd_list = self.list_avds()
        if vm_name not in  avd_list:
            logging.error(f"The emulator \"{vm_name}\" doesn't exists, choose one from {avd_list}")
            import sys
            sys.exit(-1)

        # Setting snapshot
        if self.configuration['EMULATOR'].getboolean('use_snapshot'):
            snapshot_name = self.configuration['EMULATOR'].get('snapshot_name')
            emulator_config.append('-snapshot')
            emulator_config.append(snapshot_name)
        else:
            emulator_config.append('-no-snapshot-load')

        # Setting window
        if not self.configuration['EMULATOR'].getboolean('show_window'):
            emulator_config.append('-no-window')

        # Setting wipe emulator
        if self.configuration['EMULATOR'].getboolean('wipe_data'):
            emulator_config.append('-wipe-data')       


        emulator_config.append('-no-audio')

        if self.configuration['ANALYSIS'].getboolean('use_proxy'):
            emulator_config.append('-http-proxy')
            ip = self.configuration['PROXY'].get('ip')
            port = self.configuration['PROXY'].getint('port')
            emulator_config.append(f"http://{ip}:{port}")
            emulator_config.append('-writable-system')
        
        if self.configuration['EMULATOR'].getboolean('emuroot'):
            emulator_config.append('-qemu')
            emulator_config.append('-s')

        logging.debug(f"Launching emulator : {emulator_config}")

        pipe = subprocess.Popen(emulator_config, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        # res = pipe.communicate()
        # print(res)
        # if pipe.returncode != 0:
        #     logging.error("Failed to start Emulator")
        #     raise Exception("Error: %s"%res[1])
        
        devices = self.list_devices()['emulator']

        logging.debug("Waiting for device_id")
        while len(devices) < 1:
            time.sleep(0.5)
            devices = self.list_devices()['emulator']

        self.device_id = devices[0]
        logging.debug(f"Device id : {self.device_id}")

        logging.debug("Checking if it is up")
        while not self.check_is_up():
            time.sleep(0.5)

        logging.info("Emulator launched")
