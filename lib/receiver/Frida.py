from lib.receiver.Receiver import Receiver

import subprocess
import logging
import frida
import sys

import os
dirname = os.path.dirname(os.path.realpath(__file__)) + "/../../"

class Frida(Receiver):

    def __init__(self, configuration, module, device):
        Receiver.__init__(self, "FridaReceiver")
        self.configuration = configuration
        self.module = module
        self.device = device

    def start(self):
        '''
        Attach or spawn to an application with Frida
        :return:
        '''
        logging.debug("Frida:start()")

        device = frida.get_device(self.device.device_id)
        spawn = self.configuration.getboolean('spawn_app')

        if (spawn):
            pid = device.spawn([self.module.application.package])
            session = device.attach(pid)
        else:
            pid = device.get_process(self.module.application.package).pid
            session = device.attach(pid)

        self.script = session.create_script(open(f"{dirname}frida_scripts/_agent.js").read())
        self.script.on('message', self.on_message)
        self.script.load()

        if (spawn):
            device.resume(pid)

    def stop(self):
        logging.debug("Frida:stop()")
        self.script.unload()

    def on_message(self, message, data):
        '''
        on message callback used by Frida
        :param message:
        :param data:
        :return:
        '''
        if message['type'] == 'send':
            self.module.parse(message['payload'], data)
        elif message['type'] == 'error':
            logging.error(message)
        else:
            print(message)

    @staticmethod
    def compile(configuration,plugin_code = []):
        """
        Function that create the final frida script used by the sandbox
        :return: script_location
        """
        logging.debug("Frida:compile()")

        script = Frida.generate_script(configuration,plugin_code)

        f = open(f"{dirname}frida_scripts/agent.js", "w")
        f.write(script)
        f.close()


        script = ""
        with open(f"{dirname}frida_scripts/agent.js", "r") as fd:
            for line in fd.readlines():
                if "require(" not in line:
                    script += line
        with open(f"{dirname}frida_scripts/_agent.js", "w") as fd:
            fd.write(script)

        logging.info(f'Compiled')

    @staticmethod
    def generate_script(configuration, plugin_code = []):
        '''
        Generate the frida scripts according to the configuration
        :param configuration:
        :return:
        '''
        logging.debug("Frida:generate_script()")

        extends = ""
        script = "Java.perform(function(){\n"

        if configuration['FRIDA'].getboolean('anti_emulator'):

            anti_emulator = configuration['ANTI_EMULATOR'].items()
            for item_name, selected in anti_emulator:
                if selected == 'yes':
                    script += f"\t{item_name}()\n"
            extends += "\n" + open("frida_scripts//lib/anti-emulator.js").read() + "\n"

        if configuration['FRIDA'].getboolean('hooks'):

            
            anti_emulator = configuration['HOOKS'].items()
            for item_name, selected in anti_emulator:
                if selected == 'yes':
                    script += f"\t{item_name}()\n"

            extends += "\n" + open("frida_scripts/lib/hooks.js").read() + "\n"

        if configuration['FRIDA'].getboolean('proxy_hooks'):

            anti_emulator = configuration['PROXY_HOOKS'].items()
            for item_name, selected in anti_emulator:
                if selected == 'yes':
                    script += f"\t{item_name}()\n"
            extends += "\n" + open("frida_scripts/lib/proxy_hooks.js").read() + "\n"


        extends += "\n" + open("frida_scripts/lib/common_functions.js").read() + "\n"

                    
        for name,code in plugin_code:
            script += f"\t//Plugin code : {name}\n \t{code}\n"
        script += "})"

        script += extends

        return script
