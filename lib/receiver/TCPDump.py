from lib.receiver.Receiver import Receiver
from plugins.tcpdump_plugin import plugin as TCPDumpPlugin
import logging
import subprocess

import json
from scapy.all import *
from scapy.utils import hexdump


import os
dirname = os.path.dirname(os.path.realpath(__file__)) + "/../../"

class TCPDump(Receiver):

    def __init__(self, configuration, module, device, report_path):
        Receiver.__init__(self,"TCPDumpReceiver")
        self.module = module
        self.device = device
        self.file_path = f"/data/local/tmp/tcpdump_{self.module.application.package.replace('.','_')}.pcap"
        self.ports = configuration.get('ports').split(',')
        self.out_filepath = f"{report_path}tcpdump_{self.module.application.id}_{self.module.application.package.replace('.','_')}.pcap"

    def start(self):
        logging.debug("tcpdump:start()")

        self.device.rm_tcpdump_file(self.file_path)
        self.device.start_tcpdump(self.file_path, self.ports)


    def stop(self):
        logging.debug("tcpdump:stop()")
        self.device.get_tcpdump_file(self.file_path, self.out_filepath)
        
        obj = {'plugin': 'tcpdump', 'file_path': self.out_filepath, 'summary': '', 'show':'', 'hexdump': ''}

        if os.path.isfile(self.out_filepath):
            packets = rdpcap(self.out_filepath)

            for packet in packets:
                obj['summary'] = packet.summary()
                obj['show'] = packet.show(dump=True)
                obj['hexdump'] = "\n" + hexdump(packet, dump=True)

                TCPDumpPlugin.parse(self.module, obj, '')
        else:
            print(f"{self.out_filepath} does not exist")



