import datetime
import re
import socket
from urllib.parse import urlparse

from sqlalchemy import Column, Integer, String, Boolean, ForeignKey, DateTime

from lib.model.database.Database import Database

Base = Database.get_declarative_base()


class Url(Base):
    __tablename__ = 'url'
    id = Column(Integer, primary_key=True)
    scheme = Column(String)
    ip = Column(String)
    domain = Column(String)
    uri = Column(String)
    query = Column(String)
    stacktrace = Column(String)
    is_up = Column(Boolean)
    nb = Column(Integer)
    date = Column(DateTime, default=datetime.datetime.utcnow)
    application_id = Column(Integer, ForeignKey('application.id'))

    def __init__(self, url):
        parsed_url = urlparse(url)
        self.scheme = parsed_url.scheme

        if url.find("|||") != -1:
            self.stacktrace = url[url.index("|||")+3:]
            if parsed_url.path.find("|||") != -1:
                self.uri = parsed_url.path[:parsed_url.path.index("|||")]
            else:
                self.uri = parsed_url.path
            if parsed_url.query.find("|||") != -1:
                self.query = parsed_url.query[:parsed_url.query.index("|||")]
            else:
                self.query = parsed_url.query

        else:
            self.stacktrace = ""
            self.uri = parsed_url.path
            self.query = parsed_url.query
        
        self.nb = 1

        if re.match(r'\d+\.\d+.\d+.\d+', parsed_url.netloc) :
            self.ip = parsed_url.netloc
            self.domain = None
            self.is_up = self.check_is_up(f"{self.ip}/{self.uri}?{self.query}")

        else:
            self.domain = parsed_url.netloc
            try:
                self.ip = socket.gethostbyname(self.domain)
                self.is_up = True
            except:
                self.is_up = False


    def check_is_up(self,addr):
        try:
            socket.gethostbyaddr(addr)
            return True
        except:
            return False



    def __repr__(self):
        return f'<Url(id={self.id}, scheme="{self.scheme}"' \
            f',ip="{self.ip}", domain="{self.domain}", uri="{self.uri}"' \
            f', is_up="{self.is_up}", date="{self.date}")>'