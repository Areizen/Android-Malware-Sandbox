import importlib

from sqlalchemy.orm import sessionmaker, scoped_session

from lib.model import Application
from lib.model.Key import Key
from lib.model.Url import Url
from lib.model.database.Database import Database
from lib.modules.Module import Module

from pathlib import Path

import logging
import glob


class ModuleGeneral(Module):
    stop = True

    def __init__(self, application, plugins):
        Module.__init__(self, application)
        self.plugins = plugins

    @staticmethod
    def select(path, **kwargs):
        logging.debug('ModuleGeneral:select()')
        if Path(path).is_file():
            return [path]
        else:
            return glob.glob(f"{path}/*.apk")

    def parse(self, message, data):
        """
        Parse the message and call the according function
        :param message:
        :return:
        """
        if data != None:
            print(f"{message} {data}")
        else:
            print(message)

        logging.debug("ModuleGeneral:parse()")

        for plugin in self.plugins:
            plugin.parse(self,message)

        if message.startswith("to_string:"):
            message = message[10:]

            if message.startswith("http://") or message.startswith("https://"):
                self.url(message)
                return
            return
            
        if (message.startswith('url:')):
            self.url(message[4:])
            return

        keys_type = ['Key', 'IV', 'Instance']
        typeOfMsg = ""
        if (message.split(':')[0]) in keys_type:
            typeOfMsg = message.split(':')[0]
            self.key(typeOfMsg, data)
            return


    def url(self, url):
        '''
        Add an url to the database
        :param url:
        :return:
        '''
        logging.debug("ModuleGeneral:url()")

        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        url = Url(url)

        # Whitelist Google
        # whitelist = ['0.0.0.0', '172.', '216.58.']
        whitelist = []

        add = True
        if url.ip is not None:
            for i in whitelist:
                if url.ip.startswith(i):
                    add = False

        if add:
            # Fetch application for this session ( could not use self.application
            # because the usage must be thread local )
            application = session.query(Application.Application).get(self.application.id)

            logging.debug(repr(url))

            urlInfo = ['scheme', 'domain', 'uri', 'ip']
            if len(application.url) != 0: 
                for savedUrl in application.url:
                    for value in urlInfo:
                        if getattr(url, value) != getattr(savedUrl, value):
                            application.url.append(url)
                            session.add(url)
                            session.add(application)
                            session.commit()
            else:
                application.url.append(url)
                session.add(url)
                session.add(application)
                session.commit()


            

    def key(self, typeOfMsg, key):
        '''
        Add a key to the database
        :param type:
        :param key:
        :return:
        '''
        # Create a thread local session
        engine = Database.get_engine()

        session_factory = sessionmaker(bind=engine)
        Session = scoped_session(session_factory)
        session = Session()
        Session.remove()

        # Fetch application for this session ( could not use self.application
        # because the usage must be thread local )
        application = session.query(Application.Application).get(self.application.id)
        key = Key(typeOfMsg, key.hex())
        logging.debug(repr(key))

        addKey = True

        if len(application.key) != 0: 
            for savedKey in application.key:
                if (key.value == savedKey.value) and (key.type == savedKey.type):
                    addKey = False
                if addKey:
                    application.key.append(key)
                    session.add(key)
                    session.add(application)
                    session.commit()
        else:
            application.key.append(key)
            session.add(key)
            session.add(application)
            session.commit()
