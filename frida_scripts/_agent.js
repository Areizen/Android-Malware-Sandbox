(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var proxy_hooks = require('./lib/proxy_hooks.js');

var hooks = require('./lib/hooks.js');

var anti_emulator = require('./lib/anti-emulator.js');

Java.perform(function () {
  anti_emulator.bypass_build_properties();
  anti_emulator.bypass_phonenumber();
  anti_emulator.bypass_deviceid();
  anti_emulator.bypass_imsi();
  anti_emulator.bypass_operator_name();
  anti_emulator.bypass_sim_operator_name();
  anti_emulator.bypass_has_file();
  anti_emulator.bypass_processbuilder();
  anti_emulator.bypass_system_properties();
  hooks.to_string();
  hooks.url_init();
  hooks.dexclass_loader();
  hooks.hook_secrets();
  proxy_hooks.bypass_ssl_pinning(); //Plugin code : deleteFile

  function deleteFileHook() {
    var file = Java.use("java.io.File");
    var removePtr = Module.findExportByName("libc.so", "remove");
    Interceptor.replace(removePtr, new NativeCallback(function (pathPtr, flags) {
      var path = Memory.readUtf8String(pathPtr);
      send('delete file: ' + path);
      return 0; //pretend file was deleted
    }, 'int', ['pointer', 'int']));

    file["delete"].overload().implementation = function (s) {
      s = this.getAbsolutePath();
      send('delete file: ' + s); //call original method
      // return this.delete()

      return true; //pretend file was deleted
    };
  }

  deleteFileHook(); //Plugin code : FileInteraction

  function fileHooks() {
    var File = Java.use("java.io.File");

    File.$init.overload("java.lang.String").implementation = function (a0) {
      send("file:init|" + a0);
      var ret = this.$init(a0);
      return ret;
    };

    File.$init.overload("java.lang.String", "java.lang.String").implementation = function (a0, a1) {
      send("file:init|" + a0 + "/" + a1);
      var ret = this.$init(a0, a1);
      return ret;
    };

    File.isDirectory.overload().implementation = function () {
      send("file:isDirectory|" + this);
      var ret = this.isDirectory();
      return ret;
    };
  }

  fileHooks(); //Plugin code : Library

  function hook_lib() {
    Interceptor.attach(Module.findExportByName(null, 'android_dlopen_ext'), {
      onEnter: function onEnter(args) {
        // first arg is the path to the library loaded
        var library_path = Memory.readCString(args[0]);
        send("library: " + library_path);
      },
      onLeave: function onLeave(args) {
        console.log(args);
        console.log("[+] Loaded");
      }
    });
  }

  hook_lib(); //Plugin code : Proxy
  //Plugin code : SharedPreferences

  function notifyNewSharedPreference() {
    Java.use('android.app.SharedPreferencesImpl$EditorImpl').putString.overload('java.lang.String', 'java.lang.String').implementation = function (k, v) {
      send("sharedprefs:" + k + "=" + v);
      return this.putString(k, v);
    };
  }

  notifyNewSharedPreference(); //Plugin code : antiEmulator
  //Plugin code : String
  //Plugin code : Log

  function hook_log() {
    var Log = Java.use("android.util.Log");
    var logMethods = ['d', 'e', 'i', 'v', 'w'];
    logMethods.forEach(function (method, i) {
      Log[method].overload('java.lang.String', 'java.lang.String').implementation = function (tag, msg) {
        send('Log: ' + tag + '|' + msg);
        var ret = this[method](tag, msg);
        return ret;
      };

      Log[method].overload('java.lang.String', 'java.lang.String', 'java.lang.Throwable').implementation = function (tag, msg, th) {
        send('Log: ' + tag + '|' + msg);
        var ret = this[method](tag, msg, th);
        return ret;
      };
    });
  }

  hook_log(); //Plugin code : DexClassLoader
});

},{"./lib/anti-emulator.js":2,"./lib/hooks.js":3,"./lib/proxy_hooks.js":5}],2:[function(require,module,exports){
"use strict";

function replaceFinaleField(object, fieldName, value) {
  var field = object["class"].getDeclaredField(fieldName);
  var result = field.get(object["class"]);
  send("Bypass: Build Properties &" + fieldName.toString() + " = " + result.toString() + "|" + fieldName.toString() + " = " + value.toString());
  field.setAccessible(true);
  field.set(null, value);
}

function bypass_build_properties() {
  // Class containing const that we want to modify
  var Build = Java.use("android.os.Build"); // reflection class for changing const

  var Field = Java.use('java.lang.reflect.Field');
  var Class = Java.use('java.lang.Class'); // Replacing Build static fields

  replaceFinaleField(Build, "FINGERPRINT", "abcd/C1505:4.1.1/11.3.A.2.13:user/release-keys");
  replaceFinaleField(Build, "MODEL", "C1505");
  replaceFinaleField(Build, "MANUFACTURER", "Sony");
  replaceFinaleField(Build, "BRAND", "Xperia");
  replaceFinaleField(Build, "BOARD", "7x27");
  replaceFinaleField(Build, "ID", "11.3.A.2.13");
  replaceFinaleField(Build, "SERIAL", "abcdef123");
  replaceFinaleField(Build, "TAGS", "release-keys");
  replaceFinaleField(Build, "USER", "administrator");
}

function bypass_phonenumber() {
  var TelephonyManager = Java.use('android.telephony.TelephonyManager');

  TelephonyManager.getLine1Number.overload().implementation = function () {
    var result = this.getLine1Number();
    send("Bypass: Phone number&" + result.toString() + "|060102030405");
    return "060102030405";
  };
}

function bypass_deviceid() {
  var TelephonyManager = Java.use('android.telephony.TelephonyManager');

  TelephonyManager.getDeviceId.overload().implementation = function () {
    var result = this.getDeviceId();
    send("Bypass: Device id&" + result.toString() + "|012343545456445");
    return "012343545456445";
  };
}

function bypass_imsi() {
  var TelephonyManager = Java.use('android.telephony.TelephonyManager');

  TelephonyManager.getSubscriberId.overload().implementation = function () {
    var result = this.getSubscriberId();
    send("Bypass: Suscriber ID&" + result.toString() + "|310260000000111");
    return "310260000000111";
  };
}

function bypass_operator_name() {
  var TelephonyManager = Java.use('android.telephony.TelephonyManager');

  TelephonyManager.getNetworkOperatorName.overload().implementation = function () {
    var result = this.getNetworkOperatorName();
    send("Bypass: Network Operator Name&" + result.toString() + "|not");
    return "not";
  };
}

function bypass_sim_operator_name() {
  var TelephonyManager = Java.use('android.telephony.TelephonyManager');
  var telephonyManagerMethods = ['getSimOperatorName', 'getSimOperator'];
  telephonyManagerMethods.forEach(function (method, i) {
    TelephonyManager[method].overload().implementation = function () {
      var result = this[method]();
      send("Bypass: Sim Operator &" + result.toString() + "|not");
      return "not";
    };
  });
}

function bypass_country_iso() {
  var TelephonyManager = Java.use('android.telephony.TelephonyManager');

  TelephonyManager.getNetworkCountryIso.overload('int').implementation = function (slotIndex) {
    var result = this.getNetworkCountryIso(slotIndex);
    send("Bypass: Network Country Iso&" + result.toString() + "|not");
    return "not";
  };

  TelephonyManager.getNetworkCountryIso.overload().implementation = function () {
    var result = this.getNetworkCountryIso();
    send("Bypass: Network Country Iso&" + result.toString() + "|not");
    return "not";
  };
}

function bypass_has_file() {
  var File = Java.use("java.io.File");
  var KnownFiles = ["ueventd.android_x86.rc", "x86.prop", "ueventd.ttVM_x86.rc", "init.ttVM_x86.rc", "fstab.ttVM_x86", "fstab.vbox86", "init.vbox86.rc", "ueventd.vbox86.rc", "/dev/socket/qemud", "/dev/qemu_pipe", "/system/lib/libc_malloc_debug_qemu.so", "/sys/qemu_trace", "/system/bin/qemu-props", "/dev/socket/genyd", "/dev/socket/baseband_genyd", "/proc/tty/drivers", "/proc/cpuinfo"];

  File.exists.implementation = function () {
    var x = this.getAbsolutePath();

    for (var i = 0; i < KnownFiles.length; i++) {
      if (KnownFiles[i] == x) {
        send("Bypass: Has File&" + x.toString() + "|false");
        return false;
      }
    }

    return this.exists();
  };
}

function bypass_processbuilder() {
  var ProcessBuilder = Java.use('java.lang.ProcessBuilder');

  ProcessBuilder.$init.overload('[Ljava.lang.String;').implementation = function (x) {
    var result = this.$init(x);
    send("Bypass: ProcessBuilder&" + result.toString() + "|null");
    return null;
  };
}

function bypass_system_properties() {
  /*
  * Function used to bypass common checks to
  * Android OS properties
  * Bypass the props checking from this git : https://github.com/strazzere/anti-emulator
  * Also used https://www.virusbulletin.com/virusbulletin/2019/01/vb2018-paper-unpacking-packed-unpacker-reversing-android-anti-analysis-native-library
  */
  var SystemProperties = Java.use('android.os.SystemProperties');
  var String = Java.use('java.lang.String');
  var Properties = {
    "init.svc.qemud": null,
    "init.svc.qemu-props": null,
    "qemu.hw.mainkeys": null,
    "qemu.sf.fake_camera": null,
    "qemu.sf.lcd_density": null,
    "ro.bootloader": "xxxxx",
    "ro.bootmode": "xxxxxx",
    "ro.hardware": "xxxxxx",
    "ro.kernel.android.qemud": null,
    "ro.kernel.qemu.gles": null,
    "ro.kernel.qemu": "xxxxxx",
    "ro.product.device": "xxxxx",
    "ro.product.model": "xxxxxx",
    "ro.product.name": "xxxxxx",
    "ro.serialno": null,
    "init.svc.gce_fs_monitor": "xxxxxx",
    "init.svc.dumpeventlog": "xxxxxx",
    "init.svc.dumpipclog": "xxxxxx",
    "init.svc.dumplogcat": "xxxxxx",
    "init.svc.dumplogcat-efs": "xxxxxx",
    "init.svc.filemon": "xxxxxx",
    "ro.hardware.virtual_device": "xxxxx",
    "ro.kernel.androidboot.hardware": "xxxxx",
    "ro.boot.hardware": "xxxxx",
    "ro.boot.selinux": "enable",
    "ro.factorytest": "xxxxxx",
    "ro.kernel.android.checkjni": "xxxxxx",
    "ro.build.product": "xxxxx",
    "ro.product.manufacturer": "xxxxx",
    "ro.product.brand": "xxxxx",
    "init.svc.vbox86-setup": null,
    "init.svc.goldfish-logcat": null,
    "init.svc.goldfish-setup": null
  };

  SystemProperties.get.overload('java.lang.String').implementation = function (x) {
    var result = this.get(x);

    if (x in Properties) {
      send("Bypass: System Property&" + x.toString() + " = " + result.toString() + "|" + x.toString() + " = " + Properties[x].toString());
      return Properties[x];
    }

    return this.get(x);
  };
}

function bypass_hide_app() {
  var PackageManager = Java.use('android.app.ApplicationPackageManager');

  PackageManager.setComponentEnabledSetting.overload('android.content.ComponentName', 'int', 'int').implementation = function (componentName, newState, flag) {
    var states = ['COMPONENT_ENABLED_STATE_DEFAULT', 'COMPONENT_ENABLED_STATE_ENABLED', 'COMPONENT_ENABLED_STATE_DISABLED', 'COMPONENT_ENABLED_STATE_DISABLED_USER', 'COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED'];
    var flags = ['0', 'DONT_KILL_APP', 'SYNCHRONOUS', 'DONT_KILL_APP - SYNCHRONOUS']; // COMPONENT_ENABLED_STATE_DISABLED = 2
    // DONT_KILL_APP = 1

    if (newState == 2 && flag == 1) {
      send("Bypass: Hide App&" + componentName + "\n" + states[newState] + "\n" + flags[flag] + "| ");
      return;
    } else {
      var result = this.setComponentEnabledSetting(componentName, newState, flag);
      send("Bypass: Hide App&" + componentName + "\n" + states[newState] + "\n" + flags[flag] + "|" + componentName + "\n" + states[newState] + "\n" + flags[flag]);
      return result;
    }
  };
}

exports.bypass_build_properties = bypass_build_properties;
exports.bypass_phonenumber = bypass_phonenumber;
exports.bypass_deviceid = bypass_deviceid;
exports.bypass_imsi = bypass_imsi;
exports.bypass_operator_name = bypass_operator_name;
exports.bypass_sim_operator_name = bypass_sim_operator_name;
exports.bypass_has_file = bypass_has_file;
exports.bypass_processbuilder = bypass_processbuilder;
exports.bypass_system_properties = bypass_system_properties;
exports.bypass_country_iso = bypass_country_iso;
exports.bypass_hide_app = bypass_hide_app;

},{}],3:[function(require,module,exports){
"use strict";

var jni = require("./jni_struct.js");

function Where(stack) {
  var at = "";

  for (var i = 0; i < stack.length; ++i) {
    at += stack[i].toString() + "\n";
  }

  return at;
}

function url_init() {
  var url = Java.use("java.net.URL");
  var threadef = Java.use('java.lang.Thread');
  var threadinstance = threadef.$new();

  url.$init.overload('java.lang.String').implementation = function (var0) {
    var stack = threadinstance.currentThread().getStackTrace();

    if (!var0.startsWith("null")) {
      send("url:" + var0 + "|||" + Where(stack));
    }

    return this.$init(var0);
  };
}

function to_string() {
  var String = Java.use('java.lang.String');
  var StringBuilder = Java.use('java.lang.StringBuilder');

  String.toString.implementation = function () {
    var x = this.toString();

    if (x.length > 5) {
      send("to_string:" + x + "");
    }

    return x;
  };

  StringBuilder.toString.implementation = function () {
    var x = this.toString();

    if (x.length > 5) {
      send("to_string:" + x);
    }

    return x;
  };
}

function dexclass_loader() {
  var DexClassLoader = Java.use("dalvik.system.DexClassLoader");
  var threadef = Java.use('java.lang.Thread');
  var threadinstance = threadef.$new();

  DexClassLoader.$init.implementation = function (dexPath, optimizedDirectory, librarySearchPath, parent) {
    var stack = threadinstance.currentThread().getStackTrace();
    send("dexclassloader:" + dexPath + "|" + optimizedDirectory + "|" + librarySearchPath + "|" + parent + "|" + Where(stack));
    this.$init(dexPath, optimizedDirectory, librarySearchPath, parent);
  };
}

function hook_secrets() {
  var secret_key_spec = Java.use("javax.crypto.spec.SecretKeySpec");

  secret_key_spec.$init.overload("[B", "java.lang.String").implementation = function (x, y) {
    send('Key:', new Uint8Array(x));
    return this.$init(x, y);
  };

  var iv_parameter_spec = Java.use("javax.crypto.spec.IvParameterSpec");

  iv_parameter_spec.$init.overload("[B").implementation = function (x) {
    send('IV:', new Uint8Array(x));
    return this.$init(x);
  };
} // function hook_jni(p_libraryName, function_name){
//     // To get the list of exports
//     Module.enumerateExportsSync(p_libraryName).forEach(function(symbol){
//         if(symbol.name == function_name){
//             console.log("[...] Hooking : " + p_libraryName + " -> " + symbol.name + " at " + symbol.address)
//             Interceptor.attach(symbol.address,{
//                 onEnter: function(args){
//                     var jnienv_addr = 0x0
//                     Java.perform(function(){
//                         jnienv_addr = Java.vm.getEnv().handle.readPointer();
//                     });
//                     console.log("[+] Hooked successfully, JNIEnv base adress :" + jnienv_addr)
//                     // jni.hook_all(jnienv_addr)
//                     Interceptor.attach(jni.getJNIFunctionAdress(jnienv_addr,"FindClass"),{
//                         onEnter: function(args){
//                             this.class = Memory.readCString(args[1])
//                             console.log("env->FindClass(\"" + this.class + "\")")
//                         },
//                         onLeave: function (retval) {
//                             // de/robv/android/xposed/XC_MethodHook
//                             // de/robv/android/xposed/XposedBridge
//                             if (this.class.includes("xposed")){
//                                 retval.replace(0);
//                             }
//                         }
//                     }),
//                     Interceptor.attach(Module.findExportByName('libc.so', 'strstr'), {
//                         onEnter: function (args) {
//                             this.library = args[1].readCString();
//                         },
//                         onLeave: function (retval) {
//                             // xposedbridge.jar, libxposed
//                             if (this.library.includes("xposed")){
//                                 retval.replace(0);
//                             }
//                         }
//                     });
//                 },
//                 onLeave: function(retval){
//                     // Prevent from displaying junk from other functions
//                     console.log("[-] Leaving interceptor")
//                 }
//             })
//         }
//     })
// }
// function hook_lib(){
//     // var library_name = "bll.so" // ex: libsqlite.so
//     // const ActivityThread = Java.use('android.app.ActivityThread');
//     // var context = ActivityThread.currentApplication().getApplicationContext();
//     var package_name = "com.icaali.StickerIslami";
//     var function_name = "JNI_OnLoad" // ex: JNI_OnLoad
//     var library_name = ""
//     var library_loaded = 0
//     Interceptor.attach(Module.findExportByName(null, 'android_dlopen_ext'),{
//         onEnter: function(args){
//             // first arg is the path to the library loaded
//             var library_path = Memory.readCString(args[0])
//             console.log("Loading library: " + library_path)
//             if(library_path.includes(package_name)){
//                 library_name = library_path.split("/").pop()
//                 library_loaded = 1
//             }
//         },
//         onLeave: function(args){
//             if(library_loaded ==  1){
//                 console.log("[+] Loaded")
//                 hook_jni(library_name, function_name)
//                 library_loaded = 0
//             }
//         }
//     })
// }
//hook delete Files
//Jnitrace


exports.hook_secrets = hook_secrets;
exports.to_string = to_string;
exports.dexclass_loader = dexclass_loader;
exports.url_init = url_init;

},{"./jni_struct.js":4}],4:[function(require,module,exports){
"use strict";

// class created from
// struct JNINativeInterface :
// https://android.googlesource.com/platform/libnativehelper/+/master/include_jni/jni.h#129
var jni_struct_array = ["reserved0", "reserved1", "reserved2", "reserved3", "GetVersion", "DefineClass", "FindClass", "FromReflectedMethod", "FromReflectedField", "ToReflectedMethod", "GetSuperclass", "IsAssignableFrom", "ToReflectedField", "Throw", "ThrowNew", "ExceptionOccurred", "ExceptionDescribe", "ExceptionClear", "FatalError", "PushLocalFrame", "PopLocalFrame", "NewGlobalRef", "DeleteGlobalRef", "DeleteLocalRef", "IsSameObject", "NewLocalRef", "EnsureLocalCapacity", "AllocObject", "NewObject", "NewObjectV", "NewObjectA", "GetObjectClass", "IsInstanceOf", "GetMethodID", "CallObjectMethod", "CallObjectMethodV", "CallObjectMethodA", "CallBooleanMethod", "CallBooleanMethodV", "CallBooleanMethodA", "CallByteMethod", "CallByteMethodV", "CallByteMethodA", "CallCharMethod", "CallCharMethodV", "CallCharMethodA", "CallShortMethod", "CallShortMethodV", "CallShortMethodA", "CallIntMethod", "CallIntMethodV", "CallIntMethodA", "CallLongMethod", "CallLongMethodV", "CallLongMethodA", "CallFloatMethod", "CallFloatMethodV", "CallFloatMethodA", "CallDoubleMethod", "CallDoubleMethodV", "CallDoubleMethodA", "CallVoidMethod", "CallVoidMethodV", "CallVoidMethodA", "CallNonvirtualObjectMethod", "CallNonvirtualObjectMethodV", "CallNonvirtualObjectMethodA", "CallNonvirtualBooleanMethod", "CallNonvirtualBooleanMethodV", "CallNonvirtualBooleanMethodA", "CallNonvirtualByteMethod", "CallNonvirtualByteMethodV", "CallNonvirtualByteMethodA", "CallNonvirtualCharMethod", "CallNonvirtualCharMethodV", "CallNonvirtualCharMethodA", "CallNonvirtualShortMethod", "CallNonvirtualShortMethodV", "CallNonvirtualShortMethodA", "CallNonvirtualIntMethod", "CallNonvirtualIntMethodV", "CallNonvirtualIntMethodA", "CallNonvirtualLongMethod", "CallNonvirtualLongMethodV", "CallNonvirtualLongMethodA", "CallNonvirtualFloatMethod", "CallNonvirtualFloatMethodV", "CallNonvirtualFloatMethodA", "CallNonvirtualDoubleMethod", "CallNonvirtualDoubleMethodV", "CallNonvirtualDoubleMethodA", "CallNonvirtualVoidMethod", "CallNonvirtualVoidMethodV", "CallNonvirtualVoidMethodA", "GetFieldID", "GetObjectField", "GetBooleanField", "GetByteField", "GetCharField", "GetShortField", "GetIntField", "GetLongField", "GetFloatField", "GetDoubleField", "SetObjectField", "SetBooleanField", "SetByteField", "SetCharField", "SetShortField", "SetIntField", "SetLongField", "SetFloatField", "SetDoubleField", "GetStaticMethodID", "CallStaticObjectMethod", "CallStaticObjectMethodV", "CallStaticObjectMethodA", "CallStaticBooleanMethod", "CallStaticBooleanMethodV", "CallStaticBooleanMethodA", "CallStaticByteMethod", "CallStaticByteMethodV", "CallStaticByteMethodA", "CallStaticCharMethod", "CallStaticCharMethodV", "CallStaticCharMethodA", "CallStaticShortMethod", "CallStaticShortMethodV", "CallStaticShortMethodA", "CallStaticIntMethod", "CallStaticIntMethodV", "CallStaticIntMethodA", "CallStaticLongMethod", "CallStaticLongMethodV", "CallStaticLongMethodA", "CallStaticFloatMethod", "CallStaticFloatMethodV", "CallStaticFloatMethodA", "CallStaticDoubleMethod", "CallStaticDoubleMethodV", "CallStaticDoubleMethodA", "CallStaticVoidMethod", "CallStaticVoidMethodV", "CallStaticVoidMethodA", "GetStaticFieldID", "GetStaticObjectField", "GetStaticBooleanField", "GetStaticByteField", "GetStaticCharField", "GetStaticShortField", "GetStaticIntField", "GetStaticLongField", "GetStaticFloatField", "GetStaticDoubleField", "SetStaticObjectField", "SetStaticBooleanField", "SetStaticByteField", "SetStaticCharField", "SetStaticShortField", "SetStaticIntField", "SetStaticLongField", "SetStaticFloatField", "SetStaticDoubleField", "NewString", "GetStringLength", "GetStringChars", "ReleaseStringChars", "NewStringUTF", "GetStringUTFLength", "GetStringUTFChars", "ReleaseStringUTFChars", "GetArrayLength", "NewObjectArray", "GetObjectArrayElement", "SetObjectArrayElement", "NewBooleanArray", "NewByteArray", "NewCharArray", "NewShortArray", "NewIntArray", "NewLongArray", "NewFloatArray", "NewDoubleArray", "GetBooleanArrayElements", "GetByteArrayElements", "GetCharArrayElements", "GetShortArrayElements", "GetIntArrayElements", "GetLongArrayElements", "GetFloatArrayElements", "GetDoubleArrayElements", "ReleaseBooleanArrayElements", "ReleaseByteArrayElements", "ReleaseCharArrayElements", "ReleaseShortArrayElements", "ReleaseIntArrayElements", "ReleaseLongArrayElements", "ReleaseFloatArrayElements", "ReleaseDoubleArrayElements", "GetBooleanArrayRegion", "GetByteArrayRegion", "GetCharArrayRegion", "GetShortArrayRegion", "GetIntArrayRegion", "GetLongArrayRegion", "GetFloatArrayRegion", "GetDoubleArrayRegion", "SetBooleanArrayRegion", "SetByteArrayRegion", "SetCharArrayRegion", "SetShortArrayRegion", "SetIntArrayRegion", "SetLongArrayRegion", "SetFloatArrayRegion", "SetDoubleArrayRegion", "RegisterNatives", "UnregisterNatives", "MonitorEnter", "MonitorExit", "GetJavaVM", "GetStringRegion", "GetStringUTFRegion", "GetPrimitiveArrayCritical", "ReleasePrimitiveArrayCritical", "GetStringCritical", "ReleaseStringCritical", "NewWeakGlobalRef", "DeleteWeakGlobalRef", "ExceptionCheck", "NewDirectByteBuffer", "GetDirectBufferAddress", "GetDirectBufferCapacity", "GetObjectRefType"];
/*
Calculate the given funcName address from the JNIEnv pointer
*/

function getJNIFunctionAdress(jnienv_addr, func_name) {
  var offset = jni_struct_array.indexOf(func_name) * Process.pointerSize; // console.log("offset : 0x" + offset.toString(16))

  return Memory.readPointer(jnienv_addr.add(offset));
} // Hook all function to have an overview of the function called


function hook_all(jnienv_addr) {
  jni_struct_array.forEach(function (func_name) {
    // Calculating the address of the function
    if (!func_name.includes("reserved")) {
      var func_addr = getJNIFunctionAdress(jnienv_addr, func_name);
      Interceptor.attach(func_addr, {
        onEnter: function onEnter(args) {
          console.log("[+] Entered : " + func_name);
        }
      });
    }
  });
}

exports.getJNIFunctionAdress = getJNIFunctionAdress;
exports.hook_all = hook_all;

},{}],5:[function(require,module,exports){
"use strict";

function bypass_ssl_pinning() {
  /*
  * Function used to bypass SSL Pinning
  * https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/
  */
  console.log('');
  console.log('======');
  console.log('[#] Android Bypass for various Certificate Pinning methods [#]');
  console.log('======');
  var X509TrustManager = Java.use('javax.net.ssl.X509TrustManager');
  var SSLContext = Java.use('javax.net.ssl.SSLContext'); // TrustManager (Android < 7)

  var TrustManager = Java.registerClass({
    // Implement a custom TrustManager
    name: 'dev.asd.test.TrustManager',
    "implements": [X509TrustManager],
    methods: {
      checkClientTrusted: function checkClientTrusted(chain, authType) {},
      checkServerTrusted: function checkServerTrusted(chain, authType) {},
      getAcceptedIssuers: function getAcceptedIssuers() {
        return [];
      }
    }
  }); // Prepare the TrustManager array to pass to SSLContext.init()

  var TrustManagers = [TrustManager.$new()]; // Get a handle on the init() on the SSLContext class

  var SSLContext_init = SSLContext.init.overload('[Ljavax.net.ssl.KeyManager;', '[Ljavax.net.ssl.TrustManager;', 'java.security.SecureRandom');

  try {
    // Override the init method, specifying the custom TrustManager
    SSLContext_init.implementation = function (keyManager, trustManager, secureRandom) {
      console.log('[+] Bypassing Trustmanager (Android < 7) request');
      SSLContext_init.call(this, keyManager, TrustManagers, secureRandom);
    };
  } catch (err) {
    console.log('[-] TrustManager (Android < 7) pinner not found'); //console.log(err);
  } // OkHTTPv3 (double bypass)


  try {
    var okhttp3_Activity = Java.use('okhttp3.CertificatePinner');

    okhttp3_Activity.check.overload('java.lang.String', 'java.util.List').implementation = function (str) {
      console.log('[+] Bypassing OkHTTPv3 {1}: ' + str);
      return true;
    }; // This method of CertificatePinner.check could be found in some old Android app


    okhttp3_Activity.check.overload('java.lang.String', 'java.security.cert.Certificate').implementation = function (str) {
      console.log('[+] Bypassing OkHTTPv3 {2}: ' + str);
      return true;
    };
  } catch (err) {
    console.log('[-] OkHTTPv3 pinner not found'); //console.log(err);
  } // Trustkit (triple bypass)


  try {
    var trustkit_Activity = Java.use('com.datatheorem.android.trustkit.pinning.OkHostnameVerifier');

    trustkit_Activity.verify.overload('java.lang.String', 'javax.net.ssl.SSLSession').implementation = function (str) {
      console.log('[+] Bypassing Trustkit {1}: ' + str);
      return true;
    };

    trustkit_Activity.verify.overload('java.lang.String', 'java.security.cert.X509Certificate').implementation = function (str) {
      console.log('[+] Bypassing Trustkit {2}: ' + str);
      return true;
    };

    var trustkit_PinningTrustManager = Java.use('com.datatheorem.android.trustkit.pinning.PinningTrustManager');

    trustkit_PinningTrustManager.checkServerTrusted.implementation = function () {
      console.log('[+] Bypassing Trustkit {3}');
    };
  } catch (err) {
    console.log('[-] Trustkit pinner not found'); //console.log(err);
  } // TrustManagerImpl (Android > 7)


  try {
    var TrustManagerImpl = Java.use('com.android.org.conscrypt.TrustManagerImpl');

    TrustManagerImpl.verifyChain.implementation = function (untrustedChain, trustAnchorChain, host, clientAuth, ocspData, tlsSctData) {
      console.log('[+] Bypassing TrustManagerImpl (Android > 7): ' + host);
      return untrustedChain;
    };
  } catch (err) {
    console.log('[-] TrustManagerImpl (Android > 7) pinner not found'); //console.log(err);
  } // Appcelerator Titanium


  try {
    var appcelerator_PinningTrustManager = Java.use('appcelerator.https.PinningTrustManager');

    appcelerator_PinningTrustManager.checkServerTrusted.implementation = function () {
      console.log('[+] Bypassing Appcelerator PinningTrustManager');
    };
  } catch (err) {
    console.log('[-] Appcelerator PinningTrustManager pinner not found'); //console.log(err);
  } // OpenSSLSocketImpl Conscrypt


  try {
    var OpenSSLSocketImpl = Java.use('com.android.org.conscrypt.OpenSSLSocketImpl');

    OpenSSLSocketImpl.verifyCertificateChain.implementation = function (certRefs, JavaObject, authMethod) {
      console.log('[+] Bypassing OpenSSLSocketImpl Conscrypt');
    };
  } catch (err) {
    console.log('[-] OpenSSLSocketImpl Conscrypt pinner not found'); //console.log(err);        
  } // OpenSSLEngineSocketImpl Conscrypt


  try {
    var OpenSSLEngineSocketImpl_Activity = Java.use('com.android.org.conscrypt.OpenSSLEngineSocketImpl');

    OpenSSLSocketImpl_Activity.verifyCertificateChain.overload('[Ljava.lang.Long;', 'java.lang.String').implementation = function (str1, str2) {
      console.log('[+] Bypassing OpenSSLEngineSocketImpl Conscrypt: ' + str2);
    };
  } catch (err) {
    console.log('[-] OpenSSLEngineSocketImpl Conscrypt pinner not found'); //console.log(err);
  } // OpenSSLSocketImpl Apache Harmony


  try {
    var OpenSSLSocketImpl_Harmony = Java.use('org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl');

    OpenSSLSocketImpl_Harmony.verifyCertificateChain.implementation = function (asn1DerEncodedCertificateChain, authMethod) {
      console.log('[+] Bypassing OpenSSLSocketImpl Apache Harmony');
    };
  } catch (err) {
    console.log('[-] OpenSSLSocketImpl Apache Harmony pinner not found'); //console.log(err);      
  } // PhoneGap sslCertificateChecker (https://github.com/EddyVerbruggen/SSLCertificateChecker-PhoneGap-Plugin)


  try {
    var phonegap_Activity = Java.use('nl.xservices.plugins.sslCertificateChecker');

    phonegap_Activity.execute.overload('java.lang.String', 'org.json.JSONArray', 'org.apache.cordova.CallbackContext').implementation = function (str) {
      console.log('[+] Bypassing PhoneGap sslCertificateChecker: ' + str);
      return true;
    };
  } catch (err) {
    console.log('[-] PhoneGap sslCertificateChecker pinner not found'); //console.log(err);
  } // IBM MobileFirst pinTrustedCertificatePublicKey (double bypass)


  try {
    var WLClient_Activity = Java.use('com.worklight.wlclient.api.WLClient');

    WLClient_Activity.getInstance().pinTrustedCertificatePublicKey.overload('java.lang.String').implementation = function (cert) {
      console.log('[+] Bypassing IBM MobileFirst pinTrustedCertificatePublicKey {1}: ' + cert);
      return;
    };

    WLClient_Activity.getInstance().pinTrustedCertificatePublicKey.overload('[Ljava.lang.String;').implementation = function (cert) {
      console.log('[+] Bypassing IBM MobileFirst pinTrustedCertificatePublicKey {2}: ' + cert);
      return;
    };
  } catch (err) {
    console.log('[-] IBM MobileFirst pinTrustedCertificatePublicKey pinner not found'); //console.log(err);
  } // IBM WorkLight (ancestor of MobileFirst) HostNameVerifierWithCertificatePinning (quadruple bypass)


  try {
    var worklight_Activity = Java.use('com.worklight.wlclient.certificatepinning.HostNameVerifierWithCertificatePinning');

    worklight_Activity.verify.overload('java.lang.String', 'javax.net.ssl.SSLSocket').implementation = function (str) {
      console.log('[+] Bypassing IBM WorkLight HostNameVerifierWithCertificatePinning {1}: ' + str);
      return;
    };

    worklight_Activity.verify.overload('java.lang.String', 'java.security.cert.X509Certificate').implementation = function (str) {
      console.log('[+] Bypassing IBM WorkLight HostNameVerifierWithCertificatePinning {2}: ' + str);
      return;
    };

    worklight_Activity.verify.overload('java.lang.String', '[Ljava.lang.String;', '[Ljava.lang.String;').implementation = function (str) {
      console.log('[+] Bypassing IBM WorkLight HostNameVerifierWithCertificatePinning {3}: ' + str);
      return;
    };

    worklight_Activity.verify.overload('java.lang.String', 'javax.net.ssl.SSLSession').implementation = function (str) {
      console.log('[+] Bypassing IBM WorkLight HostNameVerifierWithCertificatePinning {4}: ' + str);
      return true;
    };
  } catch (err) {
    console.log('[-] IBM WorkLight HostNameVerifierWithCertificatePinning pinner not found'); //console.log(err);
  } // Conscrypt CertPinManager


  try {
    var conscrypt_CertPinManager_Activity = Java.use('com.android.org.conscrypt.CertPinManager');

    conscrypt_CertPinManager_Activity.isChainValid.overload('java.lang.String', 'java.util.List').implementation = function (str) {
      console.log('[+] Bypassing Conscrypt CertPinManager: ' + str);
      return true;
    };
  } catch (err) {
    console.log('[-] Conscrypt CertPinManager pinner not found'); //console.log(err);
  } // CWAC-Netsecurity (unofficial back-port pinner for Android < 4.2) CertPinManager


  try {
    var cwac_CertPinManager_Activity = Java.use('com.commonsware.cwac.netsecurity.conscrypt.CertPinManager');

    cwac_CertPinManager_Activity.isChainValid.overload('java.lang.String', 'java.util.List').implementation = function (str) {
      console.log('[+] Bypassing CWAC-Netsecurity CertPinManager: ' + str);
      return true;
    };
  } catch (err) {
    console.log('[-] CWAC-Netsecurity CertPinManager pinner not found'); //console.log(err);
  } // Worklight Androidgap WLCertificatePinningPlugin


  try {
    var androidgap_WLCertificatePinningPlugin_Activity = Java.use('com.worklight.androidgap.plugin.WLCertificatePinningPlugin');

    androidgap_WLCertificatePinningPlugin_Activity.execute.overload('java.lang.String', 'org.json.JSONArray', 'org.apache.cordova.CallbackContext').implementation = function (str) {
      console.log('[+] Bypassing Worklight Androidgap WLCertificatePinningPlugin: ' + str);
      return true;
    };
  } catch (err) {
    console.log('[-] Worklight Androidgap WLCertificatePinningPlugin pinner not found'); //console.log(err);
  } // Netty FingerprintTrustManagerFactory


  try {
    var netty_FingerprintTrustManagerFactory = Java.use('io.netty.handler.ssl.util.FingerprintTrustManagerFactory'); //NOTE: sometimes this below implementation could be useful 
    //var netty_FingerprintTrustManagerFactory = Java.use('org.jboss.netty.handler.ssl.util.FingerprintTrustManagerFactory');

    netty_FingerprintTrustManagerFactory.checkTrusted.implementation = function (type, chain) {
      console.log('[+] Bypassing Netty FingerprintTrustManagerFactory');
    };
  } catch (err) {
    console.log('[-] Netty FingerprintTrustManagerFactory pinner not found'); //console.log(err);
  } // Squareup CertificatePinner [OkHTTP < v3] (double bypass)


  try {
    var Squareup_CertificatePinner_Activity = Java.use('com.squareup.okhttp.CertificatePinner');

    Squareup_CertificatePinner_Activity.check.overload('java.lang.String', 'java.security.cert.Certificate').implementation = function (str1, str2) {
      console.log('[+] Bypassing Squareup CertificatePinner {1}: ' + str1);
      return;
    };

    Squareup_CertificatePinner_Activity.check.overload('java.lang.String', 'java.util.List').implementation = function (str1, str2) {
      console.log('[+] Bypassing Squareup CertificatePinner {2}: ' + str1);
      return;
    };
  } catch (err) {
    console.log('[-] Squareup CertificatePinner pinner not found'); //console.log(err);
  } // Squareup OkHostnameVerifier [OkHTTP v3] (double bypass)


  try {
    var Squareup_OkHostnameVerifier_Activity = Java.use('com.squareup.okhttp.internal.tls.OkHostnameVerifier');

    Squareup_OkHostnameVerifier_Activity.verify.overload('java.lang.String', 'java.security.cert.X509Certificate').implementation = function (str1, str2) {
      console.log('[+] Bypassing Squareup OkHostnameVerifier {1}: ' + str1);
      return true;
    };

    Squareup_OkHostnameVerifier_Activity.verify.overload('java.lang.String', 'javax.net.ssl.SSLSession').implementation = function (str1, str2) {
      console.log('[+] Bypassing Squareup OkHostnameVerifier {2}: ' + str1);
      return true;
    };
  } catch (err) {
    console.log('[-] Squareup OkHostnameVerifier pinner not found'); //console.log(err);
  } // Android WebViewClient


  try {
    var AndroidWebViewClient_Activity = Java.use('android.webkit.WebViewClient');

    AndroidWebViewClient_Activity.onReceivedSslError.overload('android.webkit.WebView', 'android.webkit.SslErrorHandler', 'android.net.http.SslError').implementation = function (obj1, obj2, obj3) {
      console.log('[+] Bypassing Android WebViewClient');
    };
  } catch (err) {
    console.log('[-] Android WebViewClient pinner not found'); //console.log(err);
  } // Apache Cordova WebViewClient


  try {
    var CordovaWebViewClient_Activity = Java.use('org.apache.cordova.CordovaWebViewClient');

    CordovaWebViewClient_Activity.onReceivedSslError.overload('android.webkit.WebView', 'android.webkit.SslErrorHandler', 'android.net.http.SslError').implementation = function (obj1, obj2, obj3) {
      console.log('[+] Bypassing Apache Cordova WebViewClient');
      obj3.proceed();
    };
  } catch (err) {
    console.log('[-] Apache Cordova WebViewClient pinner not found'); //console.log(err):
  } // Boye AbstractVerifier


  try {
    var boye_AbstractVerifier = Java.use('ch.boye.httpclientandroidlib.conn.ssl.AbstractVerifier');

    boye_AbstractVerifier.verify.implementation = function (host, ssl) {
      console.log('[+] Bypassing Boye AbstractVerifier: ' + host);
    };
  } catch (err) {
    console.log('[-] Boye AbstractVerifier pinner not found'); //console.log(err):
  }
}

exports.bypass_ssl_pinning = bypass_ssl_pinning;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
