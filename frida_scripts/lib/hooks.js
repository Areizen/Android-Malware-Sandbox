
function set_airplane_mode(){
   //TODO
}

function url_user_agent(){
    var System = Java.use('java.lang.System') 
    var systemInstance = System.$new();
    // Set User-agent
    systemInstance.setProperty('http.agent', "Dalvik/2.1.0 (Linux; U; Android 7.1.1; GT-I9505 Build/NMF26V)");
}

function url_init(){
    var url = Java.use("java.net.URL");
    var HttpURLConnection = Java.use('java.net.HttpURLConnection');
    var URLConnection = Java.use('java.net.URLConnection');
    var HttpURLConnectionImpl = Java.use('com.android.okhttp.internal.huc.HttpURLConnectionImpl');

    var threadef = Java.use('java.lang.Thread');
    var threadinstance = threadef.$new();

    url.$init.overload('java.lang.String').implementation = function (var0) {
        var stack = threadinstance.currentThread().getStackTrace()

        if(! var0.startsWith("null")){
            var obj = {"plugin": "url", "url" : var0, 'stack': Where(stack), "req_method" : "NULL"};
            send(JSON.stringify(obj))
        }
        return this.$init(var0);
    };

    var URLConnectionClasses = [HttpURLConnectionImpl, HttpURLConnection, URLConnection];

    URLConnectionClasses.forEach(URLClass => {
        URLClass.connect.overload().implementation = function(){
            var stack = threadinstance.currentThread().getStackTrace()
            var obj = {"plugin": "url", "url" : this.getURL().toString(), 'stack': Where(stack), "req_method" : this.getRequestMethod()};
            send(JSON.stringify(obj));
            return this.connect();
        }
    });

    url.openConnection.overload().implementation = function(){
        var result = this.openConnection();
        var stack = threadinstance.currentThread().getStackTrace()
        // Cannot retrieve directly the req method, by default GET
        var obj = {"plugin": "url", "url_id": result.hashCode(), "url" : result.getURL().toString(), 'stack': Where(stack), "req_method" : 'NULL'};
        send(JSON.stringify(obj))
        return result;
    }

}

function hook_secrets(){
    var secret_key_spec = Java.use("javax.crypto.spec.SecretKeySpec");
    secret_key_spec.$init.overload("[B", "java.lang.String").implementation = function (x, y) {
        var obj = {"plugin": "key"};
        send(JSON.stringify(obj), new Uint8Array(x));
        return this.$init(x, y);
    }

    var iv_parameter_spec = Java.use("javax.crypto.spec.IvParameterSpec");
    iv_parameter_spec.$init.overload("[B").implementation = function (x) {
        var obj = {"plugin": "iv"};
        send(JSON.stringify(obj), new Uint8Array(x));
        return this.$init(x);
    }
}
