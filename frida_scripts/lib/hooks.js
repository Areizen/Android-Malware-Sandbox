const jni = require("./jni_struct.js")

function url_init(){

    var url = Java.use("java.net.URL");

    url.$init.overload('java.lang.String').implementation = function (var0) {
        if(! var0.startsWith("null")){
            send("url:" + var0 +"" );
        }
        return this.$init(var0);
    };

}

function to_string(){

    const String = Java.use('java.lang.String');
    const StringBuilder = Java.use('java.lang.StringBuilder');

    String.toString.implementation = function(){
        const x  = this.toString()
        if(x.length > 5){
            send("to_string:"+x+"")
        }
        return x
    }

    StringBuilder.toString.implementation = function(){
        const x = this.toString()
        if(x.length > 5){
            send("to_string:"+x)
        }
        return x
    }

}


function dexclass_loader(){
    var DexClassLoader = Java.use("dalvik.system.DexClassLoader");

    DexClassLoader.$init.implementation = function(dexPath,optimizedDirectory,librarySearchPath,parent){
            send("dexclassloader:" + dexPath + "|" + optimizedDirectory + "|" + librarySearchPath + "|" + parent + "")
            this.$init(dexPath,optimizedDirectory,librarySearchPath,parent);
    }
}


function hook_secrets(){
    var secret_key_spec = Java.use("javax.crypto.spec.SecretKeySpec");
    secret_key_spec.$init.overload("[B", "java.lang.String").implementation = function (x, y) {
        send('Key:',new Uint8Array(x));
        return this.$init(x, y);
    }

    var iv_parameter_spec = Java.use("javax.crypto.spec.IvParameterSpec");
    iv_parameter_spec.$init.overload("[B").implementation = function (x) {
        send('IV:',new Uint8Array(x));
        return this.$init(x);
    }
}

function hook_jni(p_libraryName, function_name){
    // To get the list of exports
    Module.enumerateExportsSync(p_libraryName).forEach(function(symbol){
        if(symbol.name == function_name){
            console.log("[...] Hooking : " + p_libraryName + " -> " + symbol.name + " at " + symbol.address)

            Interceptor.attach(symbol.address,{
                onEnter: function(args){
                    var jnienv_addr = 0x0
                    Java.perform(function(){
                        jnienv_addr = Java.vm.getEnv().handle.readPointer();
                    });
                    console.log("[+] Hooked successfully, JNIEnv base adress :" + jnienv_addr)
                    // jni.hook_all(jnienv_addr)
                    Interceptor.attach(jni.getJNIFunctionAdress(jnienv_addr,"FindClass"),{
                        onEnter: function(args){
                            this.class = Memory.readCString(args[1])
                            console.log("env->FindClass(\"" + this.class + "\")")
                        },
                        onLeave: function (retval) {
                            // de/robv/android/xposed/XC_MethodHook
                            // de/robv/android/xposed/XposedBridge
                            if (this.class.includes("xposed")){
                                retval.replace(0);
                            }
                        }
                    }),
                    Interceptor.attach(Module.findExportByName('libc.so', 'strstr'), {
                        onEnter: function (args) {
                            this.library = args[1].readCString();
                        },
                        onLeave: function (retval) {
                            // xposedbridge.jar, libxposed
                            if (this.library.includes("xposed")){
                                retval.replace(0);
                            }
                        }
                    });
                },
                onLeave: function(retval){
                    // Prevent from displaying junk from other functions
                    console.log("[-] Leaving interceptor")
                }
            })
        }
    })
}

function hook_lib(){

    // var library_name = "bll.so" // ex: libsqlite.so
    // const ActivityThread = Java.use('android.app.ActivityThread');
    // var context = ActivityThread.currentApplication().getApplicationContext();
    var package_name = "com.icaali.StickerIslami";

    var function_name = "JNI_OnLoad" // ex: JNI_OnLoad
    var library_name = ""
    var library_loaded = 0

    Interceptor.attach(Module.findExportByName(null, 'android_dlopen_ext'),{
        onEnter: function(args){
            // first arg is the path to the library loaded
            var library_path = Memory.readCString(args[0])
            console.log("Loading library: " + library_path)
            if(library_path.includes(package_name)){
                library_name = library_path.split("/").pop()
                library_loaded = 1
            }
        },
        onLeave: function(args){
            if(library_loaded ==  1){
                console.log("[+] Loaded")
                hook_jni(library_name, function_name)
                library_loaded = 0
            }
        }
    })
}


function hook_proxy(){
    var system = Java.use('java.lang.System')
    var proxy = Java.use('android.net.Proxy')

    system.getProperty.overload('java.lang.String').implementation = function(p_str){
        if (p_str.includes("http.proxyHost") || p_str.includes("https.proxyHost") ){
            console.log('Proxy: http[s].proxyHost');
            return null;
        }
        else if (p_str.includes("http.proxyPort") || (p_str.includes("https.proxyPort"))){
            console.log('Proxy: http[s].proxyPort');
            return null;
        }
        else{
            return this.getProperty(p_str);
        }
    }
    proxy.getHost.overload('android.content.Context').implementation = function(p_str){
        console.log('Proxy: android.net.Proxy.getHost');
        return null;
    }
    proxy.getPort.overload('android.content.Context').implementation = function(p_str){
        console.log('Proxy: android.net.Proxy.getPort');
        return null;
    }
}

function hook_log(){
    var Log = Java.use("android.util.Log")

    var logMethods = ['d', 'e', 'i', 'v', 'w']

    logMethods.forEach(function(method, i) {
        Log[method].overload('java.lang.String','java.lang.String').implementation = function(tag, msg) {
            console.log('Log: ' + tag + ' ' + msg);
            var ret = this[method](tag, msg);
            return ret;
        }
        Log[method].overload('java.lang.String','java.lang.String','java.lang.Throwable').implementation = function(tag, msg, th) {
            console.log('Log: ' + tag + ' ' + msg);
            var ret = this[method](tag, msg, th);
            return ret;
        } 
    });
}

//hook delete Files
//Jnitrace


exports.hook_secrets = hook_secrets
exports.to_string = to_string
exports.dexclass_loader = dexclass_loader
exports.url_init = url_init
exports.hook_lib = hook_lib
exports.hook_proxy = hook_proxy
exports.hook_log = hook_log