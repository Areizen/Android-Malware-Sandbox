const proxy_hooks = require('./lib/proxy_hooks.js')
const hooks = require('./lib/hooks.js')
const anti_emulator = require('./lib/anti-emulator.js')
Java.perform(function(){
	anti_emulator.bypass_build_properties()
	anti_emulator.bypass_phonenumber()
	anti_emulator.bypass_deviceid()
	anti_emulator.bypass_imsi()
	anti_emulator.bypass_operator_name()
	anti_emulator.bypass_sim_operator_name()
	anti_emulator.bypass_has_file()
	anti_emulator.bypass_processbuilder()
	anti_emulator.bypass_system_properties()
	hooks.to_string()
	hooks.url_init()
	hooks.dexclass_loader()
	hooks.hook_secrets()
	proxy_hooks.bypass_ssl_pinning()
	//Plugin code : deleteFile
 	function deleteFileHook(){
    var file = Java.use("java.io.File")
    var removePtr = Module.findExportByName("libc.so", "remove");
    Interceptor.replace(removePtr, new NativeCallback(function (pathPtr, flags) {
        var path = Memory.readUtf8String(pathPtr);
        send('delete file: ' + path);
        return 0; //pretend file was deleted
    }, 'int', ['pointer', 'int']));

    file.delete.overload().implementation = function (s) {
        s = this.getAbsolutePath()
        send('delete file: ' + s)
        //call original method
        // return this.delete()
        return true; //pretend file was deleted
    }
}

deleteFileHook()
	//Plugin code : FileInteraction
 	function fileHooks(){
    const File = Java.use("java.io.File")

    File.$init.overload("java.lang.String").implementation = function(a0) {
        send("file:init|" + a0);
        var ret = this.$init(a0);
        return ret;
    }

    File.$init.overload("java.lang.String", "java.lang.String").implementation = function(a0, a1) {
        send("file:init|" + a0 + "/" + a1);
        var ret = this.$init(a0,a1);
        return ret;
    }

    File.isDirectory.overload().implementation = function() {
        send("file:isDirectory|" + this);
        var ret = this.isDirectory();
        return ret;
    }
}

fileHooks()
	//Plugin code : Library
 	function hook_lib(){

    Interceptor.attach(Module.findExportByName(null, 'android_dlopen_ext'),{
        onEnter: function(args){
            // first arg is the path to the library loaded
            var library_path = Memory.readCString(args[0])
            send("library: " + library_path)
        },
        onLeave: function(args){
            console.log(args)
            console.log("[+] Loaded")
        }
    })
}

hook_lib()
	//Plugin code : Proxy
 	
	//Plugin code : SharedPreferences
 	function notifyNewSharedPreference() {
  Java.use('android.app.SharedPreferencesImpl$EditorImpl').putString.overload('java.lang.String', 'java.lang.String').implementation = function(k, v) {
    send("sharedprefs:"+k+"="+v)
    return this.putString(k, v);
  }
}


notifyNewSharedPreference()
	//Plugin code : antiEmulator
 	
	//Plugin code : String
 	
	//Plugin code : Log
 	function hook_log(){
    var Log = Java.use("android.util.Log")

    var logMethods = ['d', 'e', 'i', 'v', 'w']

    logMethods.forEach(function(method, i) {
        Log[method].overload('java.lang.String','java.lang.String').implementation = function(tag, msg) {
            send('Log: ' + tag + '|' + msg);
            var ret = this[method](tag, msg);
            return ret;
        }
        Log[method].overload('java.lang.String','java.lang.String','java.lang.Throwable').implementation = function(tag, msg, th) {
            send('Log: ' + tag + '|' + msg);
            var ret = this[method](tag, msg, th);
            return ret;
        } 
    });
}

hook_log()
	//Plugin code : DexClassLoader
 	
})